/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import s from "prop-types";
import { Button as f } from "../Button.mjs";
import { Keys as p, dispatchEvent as a, getActiveElement as l, validatePackage as g, svgIconPropType as C, classNames as c, kendoThemeMaps as k } from "@progress/kendo-react-common";
import { navigate as y } from "./utils/navigation.mjs";
import { DropDownButtonItem as b } from "./DropDownButtonItem.mjs";
import { ButtonItem as I } from "./ButtonItem.mjs";
import { Popup as D } from "@progress/kendo-react-popup";
import { getAnchorAlign as w, getPopupAlign as S } from "./utils/popup.mjs";
import { packageMetadata as x } from "../package-metadata.mjs";
const u = class u extends r.Component {
  constructor(i) {
    super(i), this.state = {
      opened: !1,
      focused: !1,
      focusedIndex: -1
    }, this.mainButton = null, this.list = null, this.skipFocus = !1, this.buttonsData = [], this.onKeyDown = (t) => {
      const { focusedIndex: e } = this.state;
      if (t.altKey) {
        !this.opened && t.keyCode === p.down ? (t.preventDefault(), this.setOpen(!0, t), this.setState({ focusedIndex: 0 })) : this.opened && t.keyCode === p.up && (t.preventDefault(), this.setState({ focusedIndex: -1 }), this.setOpen(!1, t));
        return;
      }
      const o = { ...this.state };
      if (t.keyCode === p.enter || t.keyCode === p.space) {
        t.preventDefault(), e >= 0 && this.dispatchClickEvent(t, e);
        const n = !this.opened;
        this.setState({
          focused: !0,
          focusedIndex: n ? 0 : -1
        }), this.setOpen(n, t);
        return;
      }
      if (this.opened && t.keyCode === p.esc) {
        this.setState({ focusedIndex: -1 }), this.setOpen(!1, t);
        return;
      }
      if (this.opened) {
        const n = y(
          e,
          t.keyCode,
          t.altKey,
          this.buttonsData.length
        );
        o.focusedIndex = n;
        const d = t.keyCode === p.up || t.keyCode === p.down || t.keyCode === p.left || t.keyCode === p.right;
        !t.altKey && (d || t.keyCode === p.home || t.keyCode === p.end) && t.preventDefault();
      }
      this.setState(o);
    }, this.switchFocus = (t) => {
      this.skipFocus = !0, t(), window.setTimeout(() => this.skipFocus = !1, 0);
    }, this.handleFocus = (t) => {
      this.skipFocus || (this.setState({ focused: !0, focusedIndex: this.opened ? 0 : -1 }), a(this.props.onFocus, t, this, void 0));
    }, this.handleButtonBlur = (t) => {
      this.opened || (this.setState({ focused: !1 }), a(this.props.onBlur, t, this, void 0));
    }, this.handleMenuBlur = (t) => {
      this.skipFocus || (this.setState({ focused: !1, focusedIndex: -1 }), a(this.props.onBlur, t, this, void 0), setTimeout(() => {
        this.setOpen(!1, t);
      }, 0));
    }, this.setOpen = (t, e) => {
      this.opened !== t && (this.openedDuringOnChange = t, this.setState({ opened: t }), e ? this.dispatchPopupEvent(e, t) : this.openedDuringOnChange = void 0);
    }, this.onItemClick = (t, e) => {
      this.setState({ focusedIndex: -1 }), this.dispatchClickEvent(t, e), this.setOpen(!1, t);
    }, this.onItemDown = (t) => {
      l(document) === this.list && t.preventDefault();
    }, this.mouseDown = (t) => {
      t.preventDefault();
      const e = l(document);
      this.element && e !== this.element && e !== this.list && this.element.focus();
    }, this.onPopupClose = (t) => {
      var o;
      const e = l(document);
      this.element && this.element.removeAttribute("tabindex"), (e === this.list || (o = this.list) != null && o.contains(e)) && this.switchFocus(() => {
        this.element && this.element.focus({ preventScroll: !0 });
      }), this.props.popupSettings && this.props.popupSettings.onClose && this.props.popupSettings.onClose.call(void 0, t);
    }, this.listRef = (t) => {
      this.list = t, t && this.state.focused && this.switchFocus(() => {
        t.focus({ preventScroll: !0 }), this.element && (this.element.tabIndex = -1);
      });
    }, this.onClickMainButton = (t) => {
      if (!this.buttonsData.length)
        return;
      const e = !this.opened;
      this.setState({
        focused: !0,
        focusedIndex: e ? 0 : -1
      }), this.setOpen(e, t);
    }, this.dispatchPopupEvent = (t, e) => {
      a(e ? this.props.onOpen : this.props.onClose, t, this, void 0), this.openedDuringOnChange = void 0;
    }, g(x);
  }
  get guid() {
    return this.props.id + "-accessibility-id";
  }
  get opened() {
    return this.openedDuringOnChange !== void 0 ? this.openedDuringOnChange : this.props.opened === void 0 ? this.state.opened : this.props.opened;
  }
  /**
   * @hidden
   */
  render() {
    const i = this.isRtl(), t = i ? "rtl" : void 0, { id: e, style: o, tabIndex: n, disabled: d } = this.props;
    return this.buttonsData = this.props.items || r.Children.toArray(this.props.children).filter((h) => h && h.type === b).map((h) => h.props), /* @__PURE__ */ r.createElement(r.Fragment, null, /* @__PURE__ */ r.createElement(
      f,
      {
        id: e,
        size: this.props.size,
        style: o,
        rounded: this.props.rounded,
        fillMode: this.props.fillMode,
        themeColor: this.props.themeColor,
        onClick: this.onClickMainButton,
        onMouseDown: this.mouseDown,
        onKeyDown: this.onKeyDown,
        onFocus: this.handleFocus,
        onBlur: this.handleButtonBlur,
        "aria-disabled": d ? "true" : void 0,
        tabIndex: n,
        accessKey: this.props.accessKey,
        icon: this.props.icon,
        svgIcon: this.props.svgIcon,
        iconClass: this.props.iconClass,
        className: c(
          this.props.buttonClass,
          this.props.className,
          "k-menu-button",
          // Used for a11y testing.
          "k-dropdown-button",
          // Used because of the old name of the component. Have the same styles as 'k-menu-button'.
          { "k-focus": this.state.focused },
          { "k-disabled": d }
        ),
        imageUrl: this.props.imageUrl,
        dir: t,
        ref: (h) => this.mainButton = h && h.element,
        type: "button",
        "aria-haspopup": "menu",
        "aria-expanded": this.opened ? "true" : "false",
        "aria-label": this.props.ariaLabel,
        "aria-controls": this.opened ? this.guid : void 0,
        title: this.props.title
      },
      this.props.text
    ), this.renderPopup(i));
  }
  /**
   * @hidden
   */
  componentDidMount() {
    (this.props.dir === void 0 && this.isRtl() || this.opened) && this.forceUpdate();
  }
  /**
   * The DOM element of main button.
   */
  get element() {
    return this.mainButton;
  }
  dispatchClickEvent(i, t) {
    this.isItemDisabled(t) || a(
      this.props.onItemClick,
      i,
      this,
      {
        item: this.buttonsData[t],
        itemIndex: t
      }
    );
  }
  renderPopup(i) {
    const { popupSettings: t = {}, id: e } = this.props, { focusedIndex: o } = this.state;
    return /* @__PURE__ */ r.createElement(
      D,
      {
        anchor: this.mainButton,
        show: this.opened,
        animate: t.animate,
        popupClass: c("k-menu-popup", t.popupClass),
        anchorAlign: t.anchorAlign || w(i),
        popupAlign: t.popupAlign || S(i),
        style: i ? { direction: "rtl" } : void 0,
        onClose: this.onPopupClose
      },
      /* @__PURE__ */ r.createElement(
        "ul",
        {
          role: "menu",
          id: this.guid,
          "aria-labelledby": e,
          tabIndex: -1,
          "aria-activedescendant": o >= 0 ? `${this.guid}-${o}` : void 0,
          ref: this.listRef,
          onKeyDown: this.onKeyDown,
          onBlur: this.handleMenuBlur,
          className: c("k-group k-menu-group k-reset", {
            [`k-menu-group-${k.sizeMap[this.props.size] || this.props.size}`]: this.props.size
          })
        },
        this.renderChildItems()
      )
    );
  }
  renderChildItems() {
    const { item: i, itemRender: t, textField: e } = this.props;
    return this.buttonsData.length > 0 ? this.buttonsData.map((o, n) => /* @__PURE__ */ r.createElement(
      I,
      {
        className: "k-menu-item",
        dataItem: o,
        textField: e,
        focused: this.state.focusedIndex === n,
        onClick: this.onItemClick,
        onDown: this.onItemDown,
        render: t,
        item: i,
        index: n,
        key: n,
        id: `${this.guid}-${n}`
      }
    )) : null;
  }
  isItemDisabled(i) {
    return this.buttonsData[i] ? this.buttonsData[i].disabled : this.props.disabled;
  }
  isRtl() {
    return this.props.dir !== void 0 ? this.props.dir === "rtl" : !!this.mainButton && getComputedStyle(this.mainButton).direction === "rtl";
  }
};
u.propTypes = {
  accessKey: s.string,
  ariaLabel: s.string,
  title: s.string,
  onFocus: s.func,
  onBlur: s.func,
  onItemClick: s.func,
  onOpen: s.func,
  onClose: s.func,
  items: s.arrayOf(s.any),
  textField: s.string,
  tabIndex: s.number,
  disabled: s.bool,
  icon: s.string,
  svgIcon: C,
  iconClass: s.string,
  imageUrl: s.string,
  popupSettings: s.object,
  itemRender: s.func,
  item: s.func,
  className: s.string,
  buttonClass: s.string,
  dir: s.string
}, u.defaultProps = {
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  themeColor: "base"
};
let m = u;
export {
  m as DropDownButton
};
