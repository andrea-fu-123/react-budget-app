/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import n from "prop-types";
import { Fade as c } from "@progress/kendo-react-animation";
import { classNames as h } from "@progress/kendo-react-common";
const p = class p extends r.Component {
  constructor() {
    super(...arguments), this.contentId = this.props.contentPanelId, this.childFactory = (e) => r.cloneElement(e, {
      ...e.props,
      in: e.props.children.props.id === String(this.contentId + this.props.selected)
    });
  }
  /**
   * @hidden
   */
  render() {
    const { children: e, selected: t, contentPanelId: s, keepTabsMounted: o, navItemId: i } = this.props, l = e && typeof t == "number" && r.Children.toArray(e)[t], d = h(
      "k-tabstrip-content",
      "k-active",
      l && l.props.contentClassName
    );
    return /* @__PURE__ */ r.createElement(
      "div",
      {
        className: d,
        style: this.props.style,
        id: s,
        role: "tabpanel",
        "aria-hidden": o,
        "aria-labelledby": `${i}-${(t == null ? void 0 : t.toString()) || ""}`
      },
      this.renderContent(e)
    );
  }
  renderContent(e) {
    return this.props.keepTabsMounted ? r.Children.map(this.props.children, (t, s) => this.renderChild(t, s)) : this.renderChild(
      r.Children.toArray(e)[this.props.selected],
      this.props.selected
    );
  }
  renderChild(e, t) {
    const s = t === this.props.selected, o = {
      style: {
        display: s ? void 0 : "none"
      }
    }, i = {
      position: "initial",
      display: s ? void 0 : "none"
    };
    return e.props.disabled ? null : this.props.animation ? /* @__PURE__ */ r.createElement(
      c,
      {
        appear: !0,
        exit: this.props.keepTabsMounted,
        style: i,
        childFactory: this.props.keepTabsMounted ? this.childFactory : void 0
      },
      /* @__PURE__ */ r.createElement("div", { ...o, id: String(this.contentId + t), key: t }, e.props.children)
    ) : /* @__PURE__ */ r.createElement("div", { ...o, key: t }, e.props.children);
  }
};
p.propTypes = {
  animation: n.bool,
  children: n.oneOfType([
    n.element,
    n.arrayOf(n.element)
  ]),
  selected: n.number,
  style: n.object
};
let a = p;
export {
  a as TabStripContent
};
