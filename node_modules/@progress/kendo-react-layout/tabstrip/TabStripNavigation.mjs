/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import f from "prop-types";
import { TabStripNavigationItem as C } from "./TabStripNavigationItem.mjs";
import { classNames as I } from "@progress/kendo-react-common";
import { Button as x } from "@progress/kendo-react-buttons";
import { caretAltRightIcon as P, caretAltLeftIcon as k, caretAltUpIcon as A, caretAltDownIcon as M } from "@progress/kendo-svg-icons";
const E = (S) => Array.apply(null, Array(S)), L = (S) => S.preventDefault(), b = "smooth", d = "prev", u = "next", w = class w extends a.Component {
  constructor(l) {
    super(l), this.itemsNavRef = a.createRef(), this.isRtl = () => this.props.dir === "rtl", this.onWheel = (t) => {
      t.stopPropagation();
      const s = t.deltaY < 0 ? d : u;
      this.setNewScrollPosition(s, t);
    }, this.arrowClickPrev = (t) => {
      this.handleArrowClick(d, t);
    }, this.arrowClickNext = (t) => {
      this.handleArrowClick(u, t);
    }, this.handleArrowClick = (t, s) => {
      this.setNewScrollPosition(t, s);
    }, this.setNewScrollPosition = (t, s) => {
      const e = this.itemsNavRef.current;
      if (!e)
        return;
      const n = this.horizontalScroll(), c = n ? e.scrollWidth - e.offsetWidth : e.scrollHeight - e.offsetHeight, r = (s.type === "click" ? this.props.buttonScrollSpeed : this.props.mouseScrollSpeed) || 0;
      let o = n ? e.scrollLeft : e.scrollTop, i = n ? e.scrollWidth - e.scrollLeft : e.scrollHeight - e.scrollTop, h = e.scrollWidth - e.scrollLeft * -1;
      this.isRtl() && this.horizontalScroll() ? (t === d && o < 0 && (o += r, h += r), t === u && o < c && (o -= r, h -= r), o = Math.min(0, Math.min(c, o))) : (t === d && o > 0 && (o -= r, i += r), t === u && o < c && (o += r, i -= r), o = Math.max(0, Math.min(c, o)));
      const v = o === 0, m = s.type === "click" ? b : void 0;
      if (n) {
        const T = this.isRtl() ? Math.round(h) <= e.clientWidth || Math.floor(h) <= e.clientWidth : Math.round(i) <= e.clientWidth || Math.floor(i) <= e.clientWidth;
        this.setState({
          disabledPrev: v,
          disabledNext: T
        }), e.scrollTo({ left: o, behavior: m });
      } else
        this.setState({
          disabledPrev: v,
          disabledNext: Math.round(i) <= e.clientHeight || Math.floor(i) <= e.clientHeight
        }), e.scrollTo({ top: o, behavior: m });
    }, this.renderArrow = (t, s) => {
      const e = this.horizontalScroll(), n = {
        prev: {
          arrowTab: "k-tabstrip-prev",
          fontIcon: e ? this.isRtl() ? "caret-alt-right" : "caret-alt-left" : "caret-alt-up",
          svgIcon: e ? this.isRtl() ? P : k : A
        },
        next: {
          arrowTab: "k-tabstrip-next",
          fontIcon: e ? this.isRtl() ? "caret-alt-left" : "caret-alt-right" : "caret-alt-down",
          svgIcon: e ? this.isRtl() ? k : P : M
        }
      }, c = (t === d ? this.props.prevButton : this.props.nextButton) || x, r = t === d ? this.arrowClickPrev : this.arrowClickNext;
      return /* @__PURE__ */ a.createElement(
        c,
        {
          disabled: s,
          className: `${n[t].arrowTab}`,
          onClick: r,
          icon: n[t].fontIcon,
          svgIcon: n[t].svgIcon,
          onMouseDown: L,
          tabIndex: -1,
          fillMode: "flat"
        }
      );
    }, this.state = {
      disabledPrev: this.props.selected === 0,
      disabledNext: this.props.selected === a.Children.count(this.props.children) - 1
    };
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.props.scrollable && this.scrollToSelected();
  }
  /**
   * @hidden
   */
  componentDidUpdate(l) {
    const { scrollable: t, selected: s } = this.props;
    t && l.selected !== s && (this.scrollToSelected(), this.setState({
      disabledPrev: s === 0,
      disabledNext: s === a.Children.count(this.props.children) - 1
    }));
  }
  /**
   * @hidden
   */
  render() {
    const { selected: l, tabPosition: t, children: s, onSelect: e, onKeyDown: n, navItemId: c, contentPanelId: r } = this.props, o = a.Children.count(s), i = a.Children.toArray(s);
    let h;
    s && (h = E(o).map((T, p, R) => {
      const g = {
        active: l === p,
        disabled: i[p].props.disabled,
        index: p,
        title: i[p].props.title,
        first: p === 0,
        last: p === R.length - 1,
        contentPanelId: r,
        id: c,
        onSelect: e
      };
      return /* @__PURE__ */ a.createElement(C, { key: p, ...g });
    }));
    const v = I("k-tabstrip-items-wrapper", {
      "k-hstack": t === "top" || t === "bottom",
      "k-vstack": t === "left" || t === "right"
    }), m = I("k-tabstrip-items", "k-reset");
    return /* @__PURE__ */ a.createElement("div", { className: v }, this.props.scrollable ? /* @__PURE__ */ a.createElement(a.Fragment, null, this.renderArrow(d, this.state.disabledPrev), /* @__PURE__ */ a.createElement(
      "ul",
      {
        ref: this.itemsNavRef,
        className: m,
        role: "tablist",
        tabIndex: this.props.tabIndex,
        onKeyDown: n,
        onWheel: this.onWheel,
        "aria-orientation": t === "left" || t === "right" ? "vertical" : void 0
      },
      h
    ), this.renderArrow(u, this.state.disabledNext)) : /* @__PURE__ */ a.createElement(
      "ul",
      {
        className: m,
        role: "tablist",
        tabIndex: this.props.tabIndex,
        onKeyDown: n
      },
      h
    ));
  }
  scrollToSelected() {
    const l = this.itemsNavRef.current, t = l && l.children[this.props.selected || 0];
    if (t instanceof HTMLElement && l instanceof HTMLElement) {
      const s = this.horizontalScroll(), e = s ? l.offsetWidth : l.offsetHeight, n = s ? t.offsetWidth : t.offsetHeight, c = s ? "left" : "top";
      let r = s ? l.scrollLeft : l.scrollTop, o = 0;
      if (this.isRtl()) {
        const i = t.offsetLeft;
        r = r * -1, i < 0 ? (o = i - n + l.offsetLeft, l.scrollTo({ [c]: o, behavior: b })) : i + n > e - r && (o = r + i - n, l.scrollTo({ [c]: o, behavior: b }));
      } else {
        const i = s ? t.offsetLeft - l.offsetLeft : t.offsetTop - l.offsetTop;
        r + e < i + n ? (o = i + n - e, l.scrollTo({ [c]: o, behavior: b })) : r > i && (o = i, l.scrollTo({ [c]: o, behavior: b }));
      }
    }
  }
  horizontalScroll() {
    return /top|bottom/.test(this.props.tabPosition || "top");
  }
};
w.propTypes = {
  children: f.oneOfType([
    f.element,
    f.arrayOf(f.element)
  ]),
  onSelect: f.func,
  onKeyDown: f.func,
  selected: f.number,
  tabIndex: f.number
};
let N = w;
export {
  N as TabStripNavigation
};
